LifeHarmony Scheduler App 
open lib folder and paste this code in main.dart and run
import 'package:flutter/material.dart';

void main() {
  runApp(DailyScheduleApp());
}

class DailyScheduleApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Daily Schedule App',
      theme: ThemeData(
        primarySwatch: Colors.green, // Change primary coloaccentColor: Colors.orange, // Change accent color
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: DailyScheduleScreen(),
    );
  }
}

class DailyScheduleScreen extends StatefulWidget {
  @override
  _DailyScheduleScreenState createState() => _DailyScheduleScreenState();
}

class _DailyScheduleScreenState extends State<DailyScheduleScreen> {
  List<ScheduleItem> schedule = [
    ScheduleItem(time: '8:00 AM', task: 'Morning Exercise'),
    ScheduleItem(time: '9:00 AM', task: 'Healthy Breakfast'),
    ScheduleItem(time: '10:00 AM', task: 'Work or Study'),
    ScheduleItem(time: '12:00 PM', task: 'Lunch Break'),
    ScheduleItem(time: '3:00 PM', task: 'Take a Walk'),
    ScheduleItem(time: '6:00 PM', task: 'Dinner'),
    ScheduleItem(time: '8:00 PM', task: 'Relaxation Time'),
  ];

  List<String> healthTips = [
    'Stay hydrated throughout the day.',
    'Get at least 7-8 hours of sleep each night.',
    'Include fruits and vegetables in your meals.',
    'Take breaks to stretch and move around.',
    'Avoid excessive screen time before bedtime.',
    'Practice mindfulness or meditation for stress relief.',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Daily Schedule App'),
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              'Today\'s Health Tips',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
          ),
          Container(
            height: 120,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: healthTips.length,
              itemBuilder: (context, index) {
                return Card(
                  margin: EdgeInsets.all(8),
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Text(healthTips[index]),
                  ),
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              'Today\'s Schedule',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: schedule.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(schedule[index].time),
                  subtitle: Text(schedule[index].task),
                  onTap: () {
                    _editScheduleItem(index);
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  void _editScheduleItem(int index) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        String editedTime = schedule[index].time;
        String editedTask = schedule[index].task;

        return AlertDialog(
          title: Text('Edit Schedule'),
          content: Column(
            children: [
              TextField(
                decoration: InputDecoration(labelText: 'Time'),
                controller: TextEditingController(text: editedTime),
                onChanged: (value) {
                  editedTime = value;
                },
              ),
              TextField(
                decoration: InputDecoration(labelText: 'Task'),
                controller: TextEditingController(text: editedTask),
                onChanged: (value) {
                  editedTask = value;
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                setState(() {
                  schedule[index] = ScheduleItem(time: editedTime, task: editedTask);
                });
                Navigator.of(context).pop();
              },
              child: Text('Save'),
            ),
          ],
        );
      },
    );
  }
}

class ScheduleItem {
  final String time;
  final String task;

  ScheduleItem({required this.time, required this.task});
}
